Temel Türler & Null Güvenliği

1- val ile var arasındaki fark nedir?
- val(value) değişkenlerin değerleri sonradan değiştirilemez. var(variable) değişkenlerin ise değiştirilebilir.
- Maliyet olarak bakarsak genel anlamda bir fark yoktur fakat akademik seviyede bakarsak var daha performanlıdır çünkü val'daki gibi değerinin sonradan değiştirilmemesi için ekstradan bir if bloğu yok.
- Günlük hayatta kodlarımızda threading işlemler yapabiliriz bu durumda val daha performanslı hale gelecektir.

==================================================================================

2- Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

- "Set()" ini private yaparız.
- var değişkenin sadece bulunduğu class içinde değerinin değişmesi bulunduğu class dışında değerinin değişmemesini istediğimiz durumlarda setini private yaparız.

==================================================================================

3- "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

- Immutable Değeri hiç bir şekilde değişmez(return ettiği değer değişmez). ReadOnly ise değeri atarız fakat sonrasında sadece okuyabilriz. "Set" işlemi yapamayız. 

- val değişkenlerin ReadOnly olmasının sebebi, belirli işlemler sonucunda değerleri değişebilir ancak rastgele değiştirilemez

-Readonly: Değişkenin referansı değiştirilebilir.
-Immutable: Değişkenin referansı da değiştirilemez.

==================================================================================

4-"Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

-Bir değişkene "=" ile değer atadığın zaman dilin hangi tipte değişken olduğunu anlamasıdır. 
-eğer oluşturduğumuz değişkenin değerini ilk oluşturulma anında vermiyorsak 
"initialize" işlemi yapmıyorsak. tipini belirtmemiz gerekir.

==================================================================================

5-Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

- Kotlindeki primitive değişken tipleri class gibi görünseler bile yapılan optimizasyonlar sonucu byte koda çevrilirken java tarafındaki gerçel primitivlere denk gelir.

==================================================================================

6-"Tip Güvenliği" (Type Safety) kavramını açıklayın.

- Değişken tipi ile atanan tiplerin değerlerinin aynı olması demektir
- Kotlin'in en önemli özelliklerinden biridir ve kodun daha güvenli, sağlam, okunabilir ve performanslı olmasını sağlar.

==================================================================================

7- Bir değişkeni nullable yapmak için ne yapmalıyız?

- Değişkenin tipinin sonuna "?" işareti konulur. Eğer bir değişkene tip verilmez ve direkt null değer ataması yapılırsa Ide tip çıkarımı yaparken değişkenin tipini "Nothing" olarak işaretler. Çünkü hangi tipe karşılık geldiği bilinmez. Nothing de boş bir class tan oluşmaktadır.

==================================================================================

8- "Null Güvenliği" (Null Safety) kavramını açıklayın.

- Bir değişkenin null değer alabileceğini değişkene önceden belirterek beklenmedik hatalara ve uygulamanın crash olmasının önüne geçmesi olayına deriz.

==================================================================================

9. Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?

-Bu durumda Kotlin, Nothing? tipini atar.

==================================================================================

10. İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?

- Nullable değişkenler, null olmayan değişkenlere göre daha fazla bellek kullanır. Bunun sebebi, nullable değişkenlerin null değerini saklamak için ek bir bit kullanmasıdır. Nullable değişkenlerin kullanımı, null kontrol işlemleri nedeniyle null olmayan değişkenlere göre daha az performanslı olabilir.

==================================================================================

11. Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?

-Null değer almış bir değişkenin bellekte yer kaplamadığını söylemek tam olarak doğru değildir.
-Nullable bir değişken,heap üzerinde null olduğu için yer kaplamasa bile stack üzerinde o değişken için halen bir miktar yer kaplanmış olur. Stackler genel olarak heaplerden daha hızlıdır ve performanslıdr. Özetlemek gerikirse Stack yapısı referansları yani değişkenleri tutar Heap ise bunlara ait verileri tutar.
Nullable bir değişken ise referans tiplidir. bu sebeple heap üzerinde yer kaplamasa bile stackte o değişken için yer ayrılır. 
- primitive tiplerin referans tiplere göre daha hızlı olmasının sebebi hem referansı hem değeri stackte tutulur.

==================================================================================

12. Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?

- Bu değişkenleri bir işleme tabi tutarken iki farklı seçeneğimiz var "!!" ve "?"
var result: Int?
result!!.plus(23) -> Null olup olmadığına bakma her durumda çalıştır.
result?.plus(23)  -> Eğer null değilse çalıştır.

=================================================================================================================================================================================================================================================================================================================================================================================

Sayılar

1. Kaç farklı tipte "number" sınıfı miras alan "alt sınıf" (child class) vardır? Bunların değer aralıkları neden önemlidir?

- Kotlin'de Number sınıfından miras alan 8 farklı alt sınıf bulunur.
Her alt sınıfın farklı bir değer aralığı vardır.
Kullanacağınız veri türünü seçerken, değer aralığının uygulamanızın ihtiyaçlarını karşıladığından emin olmanız önemlidir.

==================================================================================

2. Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin tip çıkarımını nasıl yapar?

- Değişkene atanan değere göre tip çıkarımını yapar .

==================================================================================

3.Float değişken oluştururken F ve f harfleri varken, Long değişken oluştururken neden küçük l harfi yoktur?

- Bazı fontlar da 'l' harfi '1' benzediği için

==================================================================================

4.Tek duyarlıklı (Single precision) ve Çift duyarlıklı (Double precision) kavramlarını açıklayın.

- Tek duyarlıklı (single precision) ve çift duyarlıklı (double precision), kayan nokta sayılarının temsilinde kullanılan iki farklı formattır. Farklılıkları, sayıların saklanmasında kullanılan bit sayısı ve bu da doğruluk ve aralıklarını etkiler.

==================================================================================