Temel Türler & Null Güvenliği

1- val ile var arasındaki fark nedir?
- val(value) değişkenlerin değerleri sonradan değiştirilemez. var(variable) değişkenlerin ise değiştirilebilir.
- Maliyet olarak bakarsak genel anlamda bir fark yoktur fakat akademik seviyede bakarsak var daha performanlıdır çünkü val'daki gibi değerinin sonradan değiştirilmemesi için ekstradan bir if bloğu yok.
- Günlük hayatta kodlarımızda threading işlemler yapabiliriz bu durumda val daha performanslı hale gelecektir.

==================================================================================

2- Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

- "Set()" ini private yaparız.
- var değişkenin sadece bulunduğu class içinde değerinin değişmesi bulunduğu class dışında değerinin değişmemesini istediğimiz durumlarda setini private yaparız.

==================================================================================

3- "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

- Immutable Değeri hiç bir şekilde değişmez(return ettiği değer değişmez). ReadOnly ise değeri atarız fakat sonrasında sadece okuyabilriz. "Set" işlemi yapamayız. 

- val değişkenlerin ReadOnly olmasının sebebi, belirli işlemler sonucunda değerleri değişebilir ancak rastgele değiştirilemez

-Readonly: Değişkenin referansı değiştirilebilir.
-Immutable: Değişkenin referansı da değiştirilemez.

==================================================================================

4-"Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

-Bir değişkene "=" ile değer atadığın zaman dilin hangi tipte değişken olduğunu anlamasıdır. 
-eğer oluşturduğumuz değişkenin değerini ilk oluşturulma anında vermiyorsak 
"initialize" işlemi yapmıyorsak. tipini belirtmemiz gerekir.

==================================================================================

5-Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

- Kotlindeki primitive değişken tipleri class gibi görünseler bile yapılan optimizasyonlar sonucu byte koda çevrilirken java tarafındaki gerçel primitivlere denk gelir.

==================================================================================

6-"Tip Güvenliği" (Type Safety) kavramını açıklayın.

- Değişken tipi ile atanan tiplerin değerlerinin aynı olması demektir
- Kotlin'in en önemli özelliklerinden biridir ve kodun daha güvenli, sağlam, okunabilir ve performanslı olmasını sağlar.

==================================================================================

7- Bir değişkeni nullable yapmak için ne yapmalıyız?

- Değişkenin tipinin sonuna "?" işareti konulur. Eğer bir değişkene tip verilmez ve direkt null değer ataması yapılırsa Ide tip çıkarımı yaparken değişkenin tipini "Nothing" olarak işaretler. Çünkü hangi tipe karşılık geldiği bilinmez. Nothing de boş bir class tan oluşmaktadır.

==================================================================================